FROM python:3.9-alpine
Python:3.9-alpine base image seçme sebebim, uygulamanın Python ile geliştirilmiş olması ve image boyutunu küçük tutmak istemem.

WORKDIR /app
Çalışma dizinini /app olarak ayarladım.

RUN pip install --no-cache-dir virtualenv
Python paket yöneticisi "pip" kullanarak izole bir sanal ortam oluşturmak için "virtualenv" paketini yükledim. "--no-cache-dir" parametresini kullanarak paketlerin önbelleğe alınmamasını ve image boyutunun küçülmesini sağladım.

RUN python -m virtualenv venv
Hem İzole bir ortam oluşturmak için hem de Flask Framework kullanımı söz konusu olduğu için pip ile yüklediğim virtualenv aracılığıyla /app dizininde bir sanal ortam oluşturdum. 

ENV PATH="/app/venv/bin:$PATH"
Sanal ortamın dizinini PATH değişkenine ekleyerek, Docker container içindeki Python yürütücüsü ve araçlarının doğru bir şekilde bulunmasını sağladım.

COPY requirements.txt .
Projenin bağımlılıklarını içeren "requirements.txt" dosyasını Docker Image'in çalışma dizinine kopyaladım.

RUN pip install --no-cache-dir -r requirements.txt
Docker Image oluşturulurken projenin bağımlılıklarını içeren requirements.txt dosyasındaki paketleri yüklemek için pip komutunu kullandım. "--no-cache-dir" parametresini kullanarak paketlerin önbelleğe alınmamasını ve image boyutunun küçülmesini sağladım.

COPY . .
Projedeki tüm dosyaları Docker Image'in çalışma dizinine kopyaladım.

EXPOSE 5000
Python uygulamamızın portu 5000 olarak belirtildiği için Docker container’ın 5000 portunu açtım.

CMD ["python", "app.py"]
Docker container başlatıldığında çalışacak komutu belirttim. Python kullanarak app.py dosyasını çalıştırmayı sağladım.





git add . :
Dockerfile dosyasını Git'e ekliyorum.

git commit -m "Dockerfile"
'git add' komutuyla eklediğim Dockerfile dosyasını kaydediyorum. -m parametresiyle yapılan değişikliklere "Dockerfile" mesajını ekledim.

git push -u origin main
Local Git Repository'deki yaptığım değişiklikleri GitHub'daki Repository'nin main branch’ine pushladım (gönderdim.)
